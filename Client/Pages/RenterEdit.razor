@using ChintaiApp.Shared.Models
@using System.ComponentModel
@using System.Text.Json;
@inject HttpClient Http
@inject NotificationService Notice

@using Microsoft.Extensions.Logging
@using Blazor.Extensions.Logging
@inject ILogger<Index> Logger

@if (Renter== null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Form Model="@Renter" OnFinish="CreateOrUpdate" LabelColSpan="10" WrapperColSpan="10">
        @{
            if(@context.RenterId !=0 ){
                <FormItem Label="借主ID">
                    @context.RenterId
                </FormItem>
            }
        }
        <FormItem Label="借主名">
            <Input @bind-Value="@context.RenterName" />
        </FormItem>
        <!-- 顔写真  -->
        <FormItem Label="携帯番号">
            <Input @bind-Value="@context.Phone" />
        </FormItem>
        <FormItem Label="生年月日">
            <DatePicker @bind-Value="@context.BirthDate" />
        </FormItem>
        <FormItem Label="属性">
            <Select Mode="default"
                DataSource="@_renterTypes"            
                @bind-Value="@context.RenterType"
                LabelName="@nameof(RenterType.Label)"
                ValueName="@nameof(RenterType.Value)">
            </Select>
        </FormItem>
        <FormItem Label="お勤め会社">
            <Input @bind-Value="@context.CompanyName" />
        </FormItem>
        <FormItem Label="月収">
            <AntDesign.InputNumber  @bind-Value="@context.MonthlySalary" />
        </FormItem>
        <FormItem Label="引越理由">
            <TextArea @bind-Value="@context.MoveReason" />
        </FormItem>
        <FormItem Label="保証人">
            <Input @bind-Value="@context.Guarantor" />
        </FormItem>
        <FormItem Label="保証人住所">
            <Input @bind-Value="@context.GuarantorAddress" />
        </FormItem>
        <FormItem Label="保証人電話番号">
            <Input @bind-Value="@context.GuarantorPhone" />
        </FormItem>
        <FormItem Label="希望予算">
            <Input @bind-Value="@context.Budget" />
        </FormItem>
        <FormItem Label="借りるとき重要とするポイント">
            <Input @bind-Value="@context.Importance" />
        </FormItem>
        <FormItem Label="借りる際の期待するポイント">
            <Input @bind-Value="@context.Exception" />
        </FormItem>
        <FormItem Label="銀行">
            <Input @bind-Value="@context.Bank" />
        </FormItem>
        <FormItem Label="支店">
            <Input @bind-Value="@context.Branch" />
        </FormItem>
        <FormItem Label="口座番号">
            <Input @bind-Value="@context.Account" />
        </FormItem>
        <FormItem Label="クレジット会社">
            <Input @bind-Value="@context.CreditCardName" />
        </FormItem>
        <FormItem Label="クレジットカード番号">
            <Input @bind-Value="@context.CreditCardNumber" />
        </FormItem>
        <FormItem Label="クレジットセキュア">
            <Input @bind-Value="@context.CreditCardSecure" />
        </FormItem>
        <FormItem Label="保証会社">
            <Input @bind-Value="@context.GuaranteeCompany" />
        </FormItem>
        <FormItem Label="備考1">
            <TextArea @bind-Value="@context.Memo1" />
        </FormItem>
        <FormItem Label="備考2">
            <TextArea @bind-Value="@context.Memo2" />
        </FormItem>
        @{
            if(@context.RenterId !=0 ){
                <FormItem Label="作成日時">
                    @context.CreatedAt
                </FormItem>
                <FormItem Label="作成日時">
                    @context.UpdatedAt
                </FormItem>
            }
        }
        <FormItem WrapperColSpan="24" Style="text-align: center">
            <Button Type="primary" HtmlType="submit">@(@context.RenterId == 0 ? "新規作成" : "更新")</Button>
        </FormItem>
    </Form>
}

@code {
    [Parameter]
    public Renter? Renter{ get; set; }

    [Parameter]
    public EventCallback Callback { get; set; }

    private void CreateOrUpdate()
    {
        if(Renter.RenterId == 0)
        {
            Create();
        }
        else
        {
            Update();
        }
    }

    private async Task Create()
    {
        var response = await Http.PostAsJsonAsync("api/renters", Renter);
        var createdJson = await response.Content.ReadAsStringAsync();
        await Callback.InvokeAsync();
        await Notice.Open(new NotificationConfig()
        {
            Message = "更新処理成功",
            Description = createdJson,
            NotificationType = NotificationType.Success
        });
    }

    private async Task Update()
    {
        await Http.PutAsJsonAsync("api/renters", Renter);

        await Callback.InvokeAsync();
        await Notice.Open(new NotificationConfig()
        {
            Message = "更新処理成功",
            NotificationType = NotificationType.Success
        });
    }

    private async Task OnFinishFailed()
    {
        var message = "";
        if(Renter.RenterId == 0)
        {
            message = "新規作成 失敗";
        }
        else
        {
            message ="更新処理 失敗";
        }
        await Notice.Open(new NotificationConfig()
        {
            Message = message,
            NotificationType = NotificationType.Error
        });
    }

    record RenterType(int Value, string Label);
    private List<RenterType> _renterTypes = new List<RenterType>
        {
            new RenterType(1, "勤め人"),
            new RenterType(2, "パート"),
            new RenterType(3, "年金"),
            new RenterType(4, "学生"),
            new RenterType(5, "無職"),
            new RenterType(6, "生活保護"),
            new RenterType(7, "その他"),
        };
}
